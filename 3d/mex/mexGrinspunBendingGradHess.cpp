 /* mexGrinspunBending.c - computes the grinspun bending energy
 *
 * [C, gradient, psi] = mexGrinspunBending( F, V, mu, lambda );
 *
 * Input:
 *  p        3 x N vector of verticies positions
 *  edge     #edges x 2 vertex ids of the edges
 *  opposite #edges x 2 opposite vertices of the edges the second value is 0 if it is a boundary
 *  kdXrestLengthdivHeightAverages       #edges x 1 : stiffness times rest length divided by edges half rest height width
 *  anglesDiffs #edges angles difference of the shell at rest and current state
 * 
 * Output:
 *
 * To compile type: mex -R2018a mexGrinspunBendingGradHess.cpp
 *
 * Notes:
 *
 * Code generated by energy/codeGenGrinpsunBending.m
 *========================================================*/
#define _USE_MATH_DEFINES
#include "mex.h"
#include "blas.h"
#include <math.h> 
#include <cmath> 
void addEntry(double *vals,double *valsD, double alpha1, int &counter, double * ii,double * jj, int key1, int key2, double value){
    ii[counter] = key1;
    jj[counter] = key2;
    vals[counter] = value;
    valsD[counter] = alpha1*value;
    ++counter;
}

void mexFunction( int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[] ) {
    // check for proper number of arguments
    if ( nrhs != 14 ) {
        mexErrMsgIdAndTxt("ARP:mexComputeBendingEnergyGrinspun:nrhs","14 inputs required.");
    }
    if ( nlhs != 5 ) {
        mexErrMsgIdAndTxt("ARP:mexComputeBendingEnergyGrinspun:nlhs","5 outputs required.");
    }

    if ( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) || mxIsSparse(prhs[0]) ) {
        mexErrMsgIdAndTxt("ARP:mexComputeBendingEnergyGrinspun:mustBeDenseRealDouble","Parameters must be dense real double.");
    }

    if ( !mxIsDouble(prhs[9]) || mxIsComplex(prhs[9]) || mxIsSparse(prhs[9]) ) {
        mexErrMsgIdAndTxt("ARP:mexComputeBendingEnergyGrinspun:mustBeDenseRealDouble","Parameters must be dense real double.");
    }

    if ( !mxIsDouble(prhs[10]) || mxIsComplex(prhs[10]) || mxIsSparse(prhs[10]) ) {
        mexErrMsgIdAndTxt("ARP:mexComputeBendingEnergyGrinspun:mustBeDenseRealDouble","Parameters must be dense real double.");
    }

    if ( !mxIsDouble(prhs[11]) || mxIsComplex(prhs[11]) || mxIsSparse(prhs[11]) ) {
        mexErrMsgIdAndTxt("ARP:mexComputeBendingEnergyGrinspun:mustBeDenseRealDouble","Parameters must be dense real double.");
    }

    if ( !mxIsDouble(prhs[12]) || mxIsComplex(prhs[12]) || mxIsSparse(prhs[12]) ) {
        mexErrMsgIdAndTxt("ARP:mexComputeBendingEnergyGrinspun:mustBeDenseRealDouble","Parameters must be dense real double.");
    }
     
    double *p = mxGetDoubles(prhs[0]);
    size_t ndofs = mxGetM(prhs[0]);

    double *edge = mxGetDoubles(prhs[1]);
    size_t numEdges = mxGetM(prhs[1]);

    double *opposite = mxGetDoubles(prhs[2]);
    size_t numEdgesO = mxGetM(prhs[2]);

    double *kdXrestLengthdivHeightAverages = mxGetDoubles(prhs[3]);

    double *anglesDiffs = mxGetDoubles(prhs[4]);
    
    double *norms1 = mxGetDoubles(prhs[5]);
    size_t numTri = mxGetM(prhs[5]);
    size_t numNormalCols = mxGetN(prhs[5]);

    double *norms2 = mxGetDoubles(prhs[6]);
    size_t numTri2 = mxGetM(prhs[6]);

    double *areas = mxGetDoubles(prhs[7]);

    double *areasTilde = mxGetDoubles(prhs[8]);

    double *innerAngles1 = mxGetDoubles(prhs[9]);

    double *innerAnglesTilde1 = mxGetDoubles(prhs[10]);

    double *innerAngles2 = mxGetDoubles(prhs[11]);

    double *innerAnglesTilde2 = mxGetDoubles(prhs[12]);

    double *bendingAlpha1 = mxGetDoubles(prhs[13]);
    
    if ( numEdges != numEdgesO ) {
        mexErrMsgIdAndTxt("ARP:mexComputeBendingEnergyGrinspun:nlhs","edge and opposite should have the same size");
    }

    if ( numTri != numTri2 ) {
        mexErrMsgIdAndTxt("ARP:mexComputeBendingEnergyGrinspun:nlhs","norm1 and norm2 should have the same size");
    }

    if ( numNormalCols != 3 ) {
        mexErrMsgIdAndTxt("ARP:mexComputeBendingEnergyGrinspun:nlhs","norm1 and 2 should have 3 cols");
    }

    //outputs
    plhs[0] = mxCreateDoubleMatrix( 12*12*numEdges, 1, mxREAL );
    double *ii = mxGetDoubles(plhs[0]);
    plhs[1] = mxCreateDoubleMatrix( 12*12*numEdges, 1, mxREAL );
    double *jj = mxGetDoubles(plhs[1]);
    plhs[2] = mxCreateDoubleMatrix( 12*12*numEdges, 1, mxREAL );
    double *vals = mxGetDoubles(plhs[2]);
    plhs[3] = mxCreateDoubleMatrix( 12*12*numEdges, 1, mxREAL );
    double *valsD = mxGetDoubles(plhs[3]);
    plhs[4] = mxCreateDoubleMatrix( ndofs, 1, mxREAL );
    double *dpsidX = mxGetDoubles(plhs[4]);
    int counter = 0;

    for ( size_t i = 0; i < numEdges; i++ ) {
        // starts with e1,e2, o1,o2
        double vertex1 = (int)edge[i];
        double vertex2 = (int)edge[i + numEdges];
        double opposite1 = (int)opposite[i];
        double opposite2 = (int)opposite[i + numEdges];

        double kd = kdXrestLengthdivHeightAverages[i];
        double anglesDiff = anglesDiffs[i];
        double alpha1 = bendingAlpha1[i];
        
        int d1 = opposite1*3-2;
        int d2 = opposite1*3-1;
        int d3 = opposite1*3;
        int d4 = vertex1*3-2;
        int d5 = vertex1*3-1;
        int d6 = vertex1*3;
        int d7 = vertex2*3-2;
        int d8 = vertex2*3-1;
        int d9 = vertex2*3;
        int d10 = opposite2*3-2;
        int d11 = opposite2*3-1;
        int d12 = opposite2*3;

        double o1_1 = p[d1 - 1];
        double o1_2 = p[d2 - 1];
        double o1_3 = p[d3 - 1];
        double v1_1 = p[d4 - 1];
        double v1_2 = p[d5 - 1];
        double v1_3 = p[d6 - 1];
        double v2_1 = p[d7 - 1];
        double v2_2 = p[d8 - 1];
        double v2_3 = p[d9 - 1];
        double o2_1 = p[d10 - 1];
        double o2_2 = p[d11 - 1];
        double o2_3 = p[d12 - 1];

        double norm11 = norms1[i];
        double norm12 = norms1[i + numTri];
        double norm13 = norms1[i + 2*numTri];

        double norm21 = norms2[i];
        double norm22 = norms2[i + numTri];
        double norm23 = norms2[i + 2*numTri];
        
        double innerAngle1 = innerAngles1[i];
        double innerAngle2 = innerAngles2[i];
        double innerAngleTilde1 = innerAnglesTilde1[i];
        double innerAngleTilde2 = innerAnglesTilde2[i];

        double area = areas[i];
        double areaTilde = areasTilde[i];
        
        double t2 = cos(innerAngle1);
        double t3 = cos(innerAngle2);
        double t4 = cos(innerAngleTilde1);
        double t5 = cos(innerAngleTilde2);
        double t6 = 1.0/area;
        double t8 = 1.0/areaTilde;
        double t10 = -v1_1;
        double t11 = -v1_2;
        double t12 = -v1_3;
        double t13 = -v2_1;
        double t14 = -v2_2;
        double t15 = -v2_3;
        double t7 = t6*t6;
        double t9 = t8*t8;
        double t16 = o1_1+t10;
        double t17 = o1_2+t11;
        double t18 = o1_3+t12;
        double t19 = o1_1+t13;
        double t20 = o2_1+t10;
        double t21 = o1_2+t14;
        double t22 = o2_2+t11;
        double t23 = o1_3+t15;
        double t24 = o2_3+t12;
        double t25 = o2_1+t13;
        double t26 = o2_2+t14;
        double t27 = o2_3+t15;
        double t28 = t13+v1_1;
        double t29 = t14+v1_2;
        double t30 = t15+v1_3;
        double t31 = fabs(t16);
        double t32 = fabs(t17);
        double t33 = fabs(t18);
        double t34 = fabs(t19);
        double t35 = fabs(t20);
        double t36 = fabs(t21);
        double t37 = fabs(t22);
        double t38 = fabs(t23);
        double t39 = fabs(t24);
        double t40 = fabs(t25);
        double t41 = fabs(t26);
        double t42 = fabs(t27);
        double t43 = fabs(t28);
        double t44 = fabs(t29);
        double t45 = fabs(t30);
        double t46 = t28*t28;
        double t47 = t29*t29;
        double t48 = t30*t30;
        double t49 = t31*t31;
        double t50 = t32*t32;
        double t51 = t33*t33;
        double t52 = t34*t34;
        double t53 = t35*t35;
        double t54 = t36*t36;
        double t55 = t37*t37;
        double t56 = t38*t38;
        double t57 = t39*t39;
        double t58 = t40*t40;
        double t59 = t41*t41;
        double t60 = t42*t42;
        double t61 = t43*t43;
        double t62 = t44*t44;
        double t63 = t45*t45;
        double t64 = t46+t47+t48;
        double t65 = t49+t50+t51;
        double t66 = t52+t54+t56;
        double t67 = t53+t55+t57;
        double t68 = t58+t59+t60;
        double t69 = t61+t62+t63;
        double t70 = 1.0/t64;
        double t71 = sqrt(t69);
        double t72 = sqrt(t65);
        double t73 = sqrt(t66);
        double t74 = sqrt(t67);
        double t75 = sqrt(t68);
        double t81 = (kd*norm11*norm12*t7*t69)/2.0;
        double t82 = (kd*norm11*norm13*t7*t69)/2.0;
        double t83 = (kd*norm12*norm13*t7*t69)/2.0;
        double t84 = (kd*norm21*norm22*t9*t69)/2.0;
        double t85 = (kd*norm21*norm23*t9*t69)/2.0;
        double t86 = (kd*norm22*norm23*t9*t69)/2.0;
        double t159 = (kd*norm11*norm21*t6*t8*t69)/2.0;
        double t160 = (kd*norm11*norm22*t6*t8*t69)/2.0;
        double t161 = (kd*norm12*norm21*t6*t8*t69)/2.0;
        double t162 = (kd*norm11*norm23*t6*t8*t69)/2.0;
        double t163 = (kd*norm12*norm22*t6*t8*t69)/2.0;
        double t164 = (kd*norm13*norm21*t6*t8*t69)/2.0;
        double t165 = (kd*norm12*norm23*t6*t8*t69)/2.0;
        double t166 = (kd*norm13*norm22*t6*t8*t69)/2.0;
        double t167 = (kd*norm13*norm23*t6*t8*t69)/2.0;
        double t76 = 1.0/t71;
        double t77 = 1.0/t72;
        double t78 = 1.0/t73;
        double t79 = 1.0/t74;
        double t80 = 1.0/t75;
        double t87 = -t81;
        double t88 = -t82;
        double t89 = -t83;
        double t90 = -t84;
        double t91 = -t85;
        double t92 = -t86;
        double t129 = (norm11*t2*t6*t72)/2.0;
        double t130 = (norm12*t2*t6*t72)/2.0;
        double t131 = (norm13*t2*t6*t72)/2.0;
        double t132 = (norm11*t3*t6*t73)/2.0;
        double t133 = (norm12*t3*t6*t73)/2.0;
        double t134 = (norm13*t3*t6*t73)/2.0;
        double t135 = (norm21*t4*t8*t74)/2.0;
        double t136 = (norm22*t4*t8*t74)/2.0;
        double t137 = (norm23*t4*t8*t74)/2.0;
        double t138 = (norm21*t5*t8*t75)/2.0;
        double t139 = (norm22*t5*t8*t75)/2.0;
        double t140 = (norm23*t5*t8*t75)/2.0;
        double t168 = -t159;
        double t169 = -t160;
        double t170 = -t161;
        double t171 = -t162;
        double t172 = -t163;
        double t173 = -t164;
        double t174 = -t165;
        double t175 = -t166;
        double t176 = -t167;
        double t93 = norm12*t16*t77;
        double t94 = norm11*t17*t77;
        double t95 = norm13*t16*t77;
        double t96 = norm11*t18*t77;
        double t97 = norm13*t17*t77;
        double t98 = norm12*t18*t77;
        double t99 = norm12*t19*t78;
        double t100 = norm11*t21*t78;
        double t101 = norm13*t19*t78;
        double t102 = norm11*t23*t78;
        double t103 = norm13*t21*t78;
        double t104 = norm12*t23*t78;
        double t105 = norm22*t20*t79;
        double t106 = norm21*t22*t79;
        double t107 = norm23*t20*t79;
        double t108 = norm21*t24*t79;
        double t109 = norm23*t22*t79;
        double t110 = norm22*t24*t79;
        double t111 = norm22*t25*t80;
        double t112 = norm21*t26*t80;
        double t113 = norm23*t25*t80;
        double t114 = norm21*t27*t80;
        double t115 = norm23*t26*t80;
        double t116 = norm22*t27*t80;
        double t117 = norm12*t28*t76;
        double t118 = norm11*t29*t76;
        double t119 = norm13*t28*t76;
        double t120 = norm11*t30*t76;
        double t121 = norm13*t29*t76;
        double t122 = norm12*t30*t76;
        double t123 = norm22*t28*t76;
        double t124 = norm21*t29*t76;
        double t125 = norm23*t28*t76;
        double t126 = norm21*t30*t76;
        double t127 = norm23*t29*t76;
        double t128 = norm22*t30*t76;
        double t195 = t129+t135;
        double t196 = t130+t136;
        double t197 = t131+t137;
        double t198 = t132+t138;
        double t199 = t133+t139;
        double t200 = t134+t140;
        double t141 = -t94;
        double t142 = -t96;
        double t143 = -t98;
        double t144 = -t100;
        double t145 = -t102;
        double t146 = -t104;
        double t147 = -t106;
        double t148 = -t108;
        double t149 = -t110;
        double t150 = -t112;
        double t151 = -t114;
        double t152 = -t116;
        double t153 = -t118;
        double t154 = -t120;
        double t155 = -t122;
        double t156 = -t124;
        double t157 = -t126;
        double t158 = -t128;
        double t280 = kd*norm11*t6*t71*t195;
        double t281 = kd*norm12*t6*t71*t195;
        double t282 = kd*norm11*t6*t71*t196;
        double t283 = kd*norm13*t6*t71*t195;
        double t284 = kd*norm12*t6*t71*t196;
        double t285 = kd*norm11*t6*t71*t197;
        double t286 = kd*norm13*t6*t71*t196;
        double t287 = kd*norm12*t6*t71*t197;
        double t288 = kd*norm13*t6*t71*t197;
        double t289 = kd*norm11*t6*t71*t198;
        double t290 = kd*norm12*t6*t71*t198;
        double t291 = kd*norm11*t6*t71*t199;
        double t292 = kd*norm13*t6*t71*t198;
        double t293 = kd*norm12*t6*t71*t199;
        double t294 = kd*norm11*t6*t71*t200;
        double t295 = kd*norm13*t6*t71*t199;
        double t296 = kd*norm12*t6*t71*t200;
        double t297 = kd*norm13*t6*t71*t200;
        double t298 = kd*norm21*t8*t71*t195;
        double t299 = kd*norm22*t8*t71*t195;
        double t300 = kd*norm21*t8*t71*t196;
        double t301 = kd*norm23*t8*t71*t195;
        double t302 = kd*norm22*t8*t71*t196;
        double t303 = kd*norm21*t8*t71*t197;
        double t304 = kd*norm23*t8*t71*t196;
        double t305 = kd*norm22*t8*t71*t197;
        double t306 = kd*norm23*t8*t71*t197;
        double t307 = kd*norm21*t8*t71*t198;
        double t308 = kd*norm22*t8*t71*t198;
        double t309 = kd*norm21*t8*t71*t199;
        double t310 = kd*norm23*t8*t71*t198;
        double t311 = kd*norm22*t8*t71*t199;
        double t312 = kd*norm21*t8*t71*t200;
        double t313 = kd*norm23*t8*t71*t199;
        double t314 = kd*norm22*t8*t71*t200;
        double t315 = kd*norm23*t8*t71*t200;
        double t460 = kd*t195*t196*2.0;
        double t461 = kd*t195*t197*2.0;
        double t462 = kd*t196*t197*2.0;
        double t463 = kd*t195*t198*2.0;
        double t464 = kd*t195*t199*2.0;
        double t465 = kd*t196*t198*2.0;
        double t466 = kd*t195*t200*2.0;
        double t467 = kd*t196*t199*2.0;
        double t468 = kd*t197*t198*2.0;
        double t469 = kd*t196*t200*2.0;
        double t470 = kd*t197*t199*2.0;
        double t471 = kd*t197*t200*2.0;
        double t472 = kd*t198*t199*2.0;
        double t473 = kd*t198*t200*2.0;
        double t474 = kd*t199*t200*2.0;
        double t177 = t93+t141;
        double t178 = t95+t142;
        double t179 = t97+t143;
        double t180 = t99+t144;
        double t181 = t101+t145;
        double t182 = t103+t146;
        double t183 = t105+t147;
        double t184 = t107+t148;
        double t185 = t109+t149;
        double t186 = t111+t150;
        double t187 = t113+t151;
        double t188 = t115+t152;
        double t189 = t117+t153;
        double t190 = t119+t154;
        double t191 = t121+t155;
        double t192 = t123+t156;
        double t193 = t125+t157;
        double t194 = t127+t158;
        double t475 = -t460;
        double t476 = -t461;
        double t477 = -t462;
        double t478 = -t463;
        double t479 = -t464;
        double t480 = -t465;
        double t481 = -t466;
        double t482 = -t467;
        double t483 = -t468;
        double t484 = -t469;
        double t485 = -t470;
        double t486 = -t471;
        double t487 = -t472;
        double t488 = -t473;
        double t489 = -t474;
        double t201 = norm11*t70*t189;
        double t202 = norm12*t70*t189;
        double t203 = norm13*t70*t189;
        double t204 = norm11*t70*t190;
        double t205 = norm12*t70*t190;
        double t206 = norm13*t70*t190;
        double t207 = norm11*t70*t191;
        double t208 = norm12*t70*t191;
        double t209 = norm13*t70*t191;
        double t210 = norm21*t70*t192;
        double t211 = norm22*t70*t192;
        double t212 = norm23*t70*t192;
        double t213 = norm21*t70*t193;
        double t214 = norm22*t70*t193;
        double t215 = norm23*t70*t193;
        double t216 = norm21*t70*t194;
        double t217 = norm22*t70*t194;
        double t218 = norm23*t70*t194;
        double t228 = (norm11*t7*t69*t189)/4.0;
        double t229 = (norm12*t7*t69*t189)/4.0;
        double t230 = (norm11*t7*t69*t190)/4.0;
        double t231 = (norm13*t7*t69*t190)/4.0;
        double t232 = (norm12*t7*t69*t191)/4.0;
        double t233 = (norm13*t7*t69*t191)/4.0;
        double t234 = (norm21*t9*t69*t192)/4.0;
        double t235 = (norm22*t9*t69*t192)/4.0;
        double t236 = (norm21*t9*t69*t193)/4.0;
        double t237 = (norm23*t9*t69*t193)/4.0;
        double t238 = (norm22*t9*t69*t194)/4.0;
        double t239 = (norm23*t9*t69*t194)/4.0;
        double t244 = (norm11*t3*t7*t65*t177)/4.0;
        double t245 = (norm12*t3*t7*t65*t177)/4.0;
        double t246 = (norm11*t3*t7*t65*t178)/4.0;
        double t247 = (norm13*t3*t7*t65*t178)/4.0;
        double t248 = (norm12*t3*t7*t65*t179)/4.0;
        double t249 = (norm13*t3*t7*t65*t179)/4.0;
        double t250 = (norm11*t2*t7*t66*t180)/4.0;
        double t251 = (norm12*t2*t7*t66*t180)/4.0;
        double t252 = (norm11*t2*t7*t66*t181)/4.0;
        double t253 = (norm13*t2*t7*t66*t181)/4.0;
        double t254 = (norm12*t2*t7*t66*t182)/4.0;
        double t255 = (norm13*t2*t7*t66*t182)/4.0;
        double t256 = (norm21*t5*t9*t67*t183)/4.0;
        double t257 = (norm22*t5*t9*t67*t183)/4.0;
        double t258 = (norm21*t5*t9*t67*t184)/4.0;
        double t259 = (norm23*t5*t9*t67*t184)/4.0;
        double t260 = (norm22*t5*t9*t67*t185)/4.0;
        double t261 = (norm23*t5*t9*t67*t185)/4.0;
        double t262 = (norm21*t4*t9*t68*t186)/4.0;
        double t263 = (norm22*t4*t9*t68*t186)/4.0;
        double t264 = (norm21*t4*t9*t68*t187)/4.0;
        double t265 = (norm23*t4*t9*t68*t187)/4.0;
        double t266 = (norm22*t4*t9*t68*t188)/4.0;
        double t267 = (norm23*t4*t9*t68*t188)/4.0;
        double t316 = (norm11*t7*t71*t72*t177)/4.0;
        double t317 = (norm12*t7*t71*t72*t177)/4.0;
        double t318 = (norm13*t7*t71*t72*t177)/4.0;
        double t319 = (norm11*t7*t71*t72*t178)/4.0;
        double t320 = (norm12*t7*t71*t72*t178)/4.0;
        double t321 = (norm13*t7*t71*t72*t178)/4.0;
        double t322 = (norm11*t7*t71*t72*t179)/4.0;
        double t323 = (norm12*t7*t71*t72*t179)/4.0;
        double t324 = (norm13*t7*t71*t72*t179)/4.0;
        double t325 = (norm11*t7*t71*t73*t180)/4.0;
        double t326 = (norm12*t7*t71*t73*t180)/4.0;
        double t327 = (norm13*t7*t71*t73*t180)/4.0;
        double t328 = (norm11*t7*t71*t73*t181)/4.0;
        double t329 = (norm12*t7*t71*t73*t181)/4.0;
        double t330 = (norm13*t7*t71*t73*t181)/4.0;
        double t331 = (norm11*t7*t71*t73*t182)/4.0;
        double t332 = (norm12*t7*t71*t73*t182)/4.0;
        double t333 = (norm13*t7*t71*t73*t182)/4.0;
        double t334 = (norm21*t9*t71*t74*t183)/4.0;
        double t335 = (norm22*t9*t71*t74*t183)/4.0;
        double t336 = (norm23*t9*t71*t74*t183)/4.0;
        double t337 = (norm21*t9*t71*t74*t184)/4.0;
        double t338 = (norm22*t9*t71*t74*t184)/4.0;
        double t339 = (norm23*t9*t71*t74*t184)/4.0;
        double t340 = (norm21*t9*t71*t74*t185)/4.0;
        double t341 = (norm22*t9*t71*t74*t185)/4.0;
        double t342 = (norm23*t9*t71*t74*t185)/4.0;
        double t343 = (norm21*t9*t71*t75*t186)/4.0;
        double t344 = (norm22*t9*t71*t75*t186)/4.0;
        double t345 = (norm23*t9*t71*t75*t186)/4.0;
        double t346 = (norm21*t9*t71*t75*t187)/4.0;
        double t347 = (norm22*t9*t71*t75*t187)/4.0;
        double t348 = (norm23*t9*t71*t75*t187)/4.0;
        double t349 = (norm21*t9*t71*t75*t188)/4.0;
        double t350 = (norm22*t9*t71*t75*t188)/4.0;
        double t351 = (norm23*t9*t71*t75*t188)/4.0;
        double t352 = (norm11*t2*t7*t72*t73*t177)/4.0;
        double t353 = (norm12*t2*t7*t72*t73*t177)/4.0;
        double t354 = (norm13*t2*t7*t72*t73*t177)/4.0;
        double t355 = (norm11*t2*t7*t72*t73*t178)/4.0;
        double t356 = (norm12*t2*t7*t72*t73*t178)/4.0;
        double t357 = (norm13*t2*t7*t72*t73*t178)/4.0;
        double t358 = (norm11*t2*t7*t72*t73*t179)/4.0;
        double t359 = (norm12*t2*t7*t72*t73*t179)/4.0;
        double t360 = (norm13*t2*t7*t72*t73*t179)/4.0;
        double t361 = (norm11*t3*t7*t72*t73*t180)/4.0;
        double t362 = (norm12*t3*t7*t72*t73*t180)/4.0;
        double t363 = (norm13*t3*t7*t72*t73*t180)/4.0;
        double t364 = (norm11*t3*t7*t72*t73*t181)/4.0;
        double t365 = (norm12*t3*t7*t72*t73*t181)/4.0;
        double t366 = (norm13*t3*t7*t72*t73*t181)/4.0;
        double t367 = (norm11*t3*t7*t72*t73*t182)/4.0;
        double t368 = (norm12*t3*t7*t72*t73*t182)/4.0;
        double t369 = (norm13*t3*t7*t72*t73*t182)/4.0;
        double t370 = (norm21*t4*t9*t74*t75*t183)/4.0;
        double t371 = (norm22*t4*t9*t74*t75*t183)/4.0;
        double t372 = (norm23*t4*t9*t74*t75*t183)/4.0;
        double t373 = (norm21*t4*t9*t74*t75*t184)/4.0;
        double t374 = (norm22*t4*t9*t74*t75*t184)/4.0;
        double t375 = (norm23*t4*t9*t74*t75*t184)/4.0;
        double t376 = (norm21*t4*t9*t74*t75*t185)/4.0;
        double t377 = (norm22*t4*t9*t74*t75*t185)/4.0;
        double t378 = (norm23*t4*t9*t74*t75*t185)/4.0;
        double t379 = (norm21*t5*t9*t74*t75*t186)/4.0;
        double t380 = (norm22*t5*t9*t74*t75*t186)/4.0;
        double t381 = (norm23*t5*t9*t74*t75*t186)/4.0;
        double t382 = (norm21*t5*t9*t74*t75*t187)/4.0;
        double t383 = (norm22*t5*t9*t74*t75*t187)/4.0;
        double t384 = (norm23*t5*t9*t74*t75*t187)/4.0;
        double t385 = (norm21*t5*t9*t74*t75*t188)/4.0;
        double t386 = (norm22*t5*t9*t74*t75*t188)/4.0;
        double t387 = (norm23*t5*t9*t74*t75*t188)/4.0;
        double t388 = (norm11*t3*t7*t71*t72*t189)/4.0;
        double t389 = (norm12*t3*t7*t71*t72*t189)/4.0;
        double t390 = (norm13*t3*t7*t71*t72*t189)/4.0;
        double t391 = (norm11*t3*t7*t71*t72*t190)/4.0;
        double t392 = (norm12*t3*t7*t71*t72*t190)/4.0;
        double t393 = (norm13*t3*t7*t71*t72*t190)/4.0;
        double t394 = (norm11*t3*t7*t71*t72*t191)/4.0;
        double t395 = (norm12*t3*t7*t71*t72*t191)/4.0;
        double t396 = (norm13*t3*t7*t71*t72*t191)/4.0;
        double t397 = (norm11*t2*t7*t71*t73*t189)/4.0;
        double t398 = (norm12*t2*t7*t71*t73*t189)/4.0;
        double t399 = (norm13*t2*t7*t71*t73*t189)/4.0;
        double t400 = (norm11*t2*t7*t71*t73*t190)/4.0;
        double t401 = (norm12*t2*t7*t71*t73*t190)/4.0;
        double t402 = (norm13*t2*t7*t71*t73*t190)/4.0;
        double t403 = (norm11*t2*t7*t71*t73*t191)/4.0;
        double t404 = (norm12*t2*t7*t71*t73*t191)/4.0;
        double t405 = (norm13*t2*t7*t71*t73*t191)/4.0;
        double t406 = (norm21*t5*t9*t71*t74*t192)/4.0;
        double t407 = (norm22*t5*t9*t71*t74*t192)/4.0;
        double t408 = (norm23*t5*t9*t71*t74*t192)/4.0;
        double t409 = (norm21*t5*t9*t71*t74*t193)/4.0;
        double t410 = (norm22*t5*t9*t71*t74*t193)/4.0;
        double t411 = (norm23*t5*t9*t71*t74*t193)/4.0;
        double t412 = (norm21*t5*t9*t71*t74*t194)/4.0;
        double t413 = (norm22*t5*t9*t71*t74*t194)/4.0;
        double t414 = (norm23*t5*t9*t71*t74*t194)/4.0;
        double t415 = (norm21*t4*t9*t71*t75*t192)/4.0;
        double t416 = (norm22*t4*t9*t71*t75*t192)/4.0;
        double t417 = (norm23*t4*t9*t71*t75*t192)/4.0;
        double t418 = (norm21*t4*t9*t71*t75*t193)/4.0;
        double t419 = (norm22*t4*t9*t71*t75*t193)/4.0;
        double t420 = (norm23*t4*t9*t71*t75*t193)/4.0;
        double t421 = (norm21*t4*t9*t71*t75*t194)/4.0;
        double t422 = (norm22*t4*t9*t71*t75*t194)/4.0;
        double t423 = (norm23*t4*t9*t71*t75*t194)/4.0;
        double t219 = -t210;
        double t220 = -t211;
        double t221 = -t212;
        double t222 = -t213;
        double t223 = -t214;
        double t224 = -t215;
        double t225 = -t216;
        double t226 = -t217;
        double t227 = -t218;
        double t240 = -t231;
        double t241 = -t232;
        double t242 = -t237;
        double t243 = -t238;
        double t268 = -t244;
        double t269 = -t247;
        double t270 = -t248;
        double t271 = -t249;
        double t272 = -t251;
        double t273 = -t252;
        double t274 = -t257;
        double t275 = -t258;
        double t276 = -t262;
        double t277 = -t265;
        double t278 = -t266;
        double t279 = -t267;
        double t424 = -t353;
        double t425 = -t355;
        double t426 = -t357;
        double t427 = -t359;
        double t428 = -t361;
        double t429 = -t362;
        double t430 = -t363;
        double t431 = -t364;
        double t432 = -t365;
        double t433 = -t366;
        double t434 = -t367;
        double t435 = -t368;
        double t436 = -t369;
        double t437 = -t370;
        double t438 = -t372;
        double t439 = -t374;
        double t440 = -t376;
        double t441 = -t378;
        double t442 = -t388;
        double t443 = -t390;
        double t444 = -t392;
        double t445 = -t394;
        double t446 = -t396;
        double t447 = -t398;
        double t448 = -t400;
        double t449 = -t402;
        double t450 = -t404;
        double t451 = -t406;
        double t452 = -t408;
        double t453 = -t410;
        double t454 = -t412;
        double t455 = -t414;
        double t456 = -t416;
        double t457 = -t418;
        double t458 = -t420;
        double t459 = -t422;
        double t490 = t228+t233;
        double t491 = t234+t239;
        double t511 = t317+t393;
        double t512 = t321+t389;
        double t513 = t319+t395;
        double t514 = t323+t391;
        double t515 = t327+t399;
        double t516 = t325+t405;
        double t517 = t329+t401;
        double t518 = t333+t397;
        double t519 = t331+t403;
        double t520 = t335+t411;
        double t521 = t339+t407;
        double t522 = t337+t413;
        double t523 = t341+t409;
        double t524 = t345+t417;
        double t525 = t343+t423;
        double t526 = t347+t419;
        double t527 = t351+t415;
        double t528 = t349+t421;
        double t492 = t229+t240;
        double t493 = t230+t241;
        double t494 = t235+t242;
        double t495 = t236+t243;
        double t496 = anglesDiff*kd*t490*2.0;
        double t497 = anglesDiff*kd*t491*2.0;
        double t529 = t318+t443;
        double t530 = t316+t446;
        double t531 = t320+t444;
        double t532 = t324+t442;
        double t533 = t322+t445;
        double t534 = t326+t449;
        double t535 = t330+t447;
        double t536 = t328+t450;
        double t537 = t332+t448;
        double t538 = t336+t452;
        double t539 = t334+t455;
        double t540 = t338+t453;
        double t541 = t342+t451;
        double t542 = t340+t454;
        double t543 = t344+t458;
        double t544 = t348+t456;
        double t545 = t346+t459;
        double t546 = t350+t457;
        double t547 = anglesDiff*kd*t511*2.0;
        double t548 = anglesDiff*kd*t512*2.0;
        double t549 = anglesDiff*kd*t513*2.0;
        double t550 = anglesDiff*kd*t514*2.0;
        double t551 = anglesDiff*kd*t515*2.0;
        double t552 = anglesDiff*kd*t516*2.0;
        double t553 = anglesDiff*kd*t517*2.0;
        double t554 = anglesDiff*kd*t518*2.0;
        double t555 = anglesDiff*kd*t519*2.0;
        double t556 = anglesDiff*kd*t520*2.0;
        double t557 = anglesDiff*kd*t521*2.0;
        double t558 = anglesDiff*kd*t522*2.0;
        double t559 = anglesDiff*kd*t523*2.0;
        double t560 = anglesDiff*kd*t524*2.0;
        double t561 = anglesDiff*kd*t525*2.0;
        double t562 = anglesDiff*kd*t526*2.0;
        double t563 = anglesDiff*kd*t527*2.0;
        double t564 = anglesDiff*kd*t528*2.0;
        double t637 = t206+t224+t245+t259+t269+t274;
        double t638 = t209+t227+t256+t261+t268+t271;
        double t639 = t208+t226+t246+t260+t270+t275;
        double t640 = t206+t224+t253+t263+t272+t277;
        double t641 = t209+t227+t250+t255+t276+t279;
        double t642 = t208+t226+t254+t264+t273+t278;
        double t653 = t203+t221+t354+t381+t430+t438;
        double t654 = t202+t220+t375+t380+t426+t429;
        double t655 = t201+t219+t360+t379+t428+t441;
        double t656 = t206+t224+t371+t384+t424+t433;
        double t657 = t205+t223+t356+t383+t432+t439;
        double t658 = t204+t222+t377+t382+t427+t431;
        double t659 = t209+t227+t352+t387+t436+t437;
        double t660 = t208+t226+t373+t386+t425+t435;
        double t661 = t207+t225+t358+t385+t434+t440;
        double t498 = anglesDiff*kd*t492*2.0;
        double t499 = -t496;
        double t500 = anglesDiff*kd*t493*2.0;
        double t501 = anglesDiff*kd*t494*2.0;
        double t502 = anglesDiff*kd*t495*2.0;
        double t505 = t91+t497;
        double t565 = anglesDiff*kd*t529*2.0;
        double t566 = -t547;
        double t567 = anglesDiff*kd*t530*2.0;
        double t568 = anglesDiff*kd*t531*2.0;
        double t569 = anglesDiff*kd*t532*2.0;
        double t570 = -t550;
        double t571 = anglesDiff*kd*t533*2.0;
        double t572 = anglesDiff*kd*t534*2.0;
        double t573 = anglesDiff*kd*t535*2.0;
        double t574 = -t553;
        double t575 = anglesDiff*kd*t536*2.0;
        double t576 = anglesDiff*kd*t537*2.0;
        double t577 = anglesDiff*kd*t538*2.0;
        double t578 = -t557;
        double t579 = anglesDiff*kd*t539*2.0;
        double t580 = anglesDiff*kd*t540*2.0;
        double t581 = anglesDiff*kd*t541*2.0;
        double t582 = -t558;
        double t583 = anglesDiff*kd*t542*2.0;
        double t584 = -t560;
        double t585 = anglesDiff*kd*t543*2.0;
        double t586 = anglesDiff*kd*t544*2.0;
        double t587 = -t561;
        double t588 = -t563;
        double t589 = anglesDiff*kd*t545*2.0;
        double t590 = anglesDiff*kd*t546*2.0;
        double t591 = -t564;
        double t601 = t287+t548;
        double t602 = t281+t549;
        double t603 = t297+t551;
        double t604 = t292+t552;
        double t605 = t294+t554;
        double t606 = t289+t555;
        double t607 = t304+t556;
        double t608 = t300+t559;
        double t609 = t311+t562;
        double t643 = anglesDiff*kd*t637*2.0;
        double t644 = anglesDiff*kd*t638*2.0;
        double t645 = anglesDiff*kd*t639*2.0;
        double t646 = anglesDiff*kd*t640*2.0;
        double t647 = anglesDiff*kd*t641*2.0;
        double t648 = anglesDiff*kd*t642*2.0;
        double t662 = anglesDiff*kd*t653*2.0;
        double t663 = anglesDiff*kd*t654*2.0;
        double t664 = anglesDiff*kd*t655*2.0;
        double t665 = anglesDiff*kd*t656*2.0;
        double t666 = anglesDiff*kd*t657*2.0;
        double t667 = anglesDiff*kd*t658*2.0;
        double t668 = anglesDiff*kd*t659*2.0;
        double t669 = anglesDiff*kd*t660*2.0;
        double t670 = anglesDiff*kd*t661*2.0;
        double t503 = -t498;
        double t504 = -t502;
        double t506 = t88+t499;
        double t507 = t87+t500;
        double t508 = t92+t501;
        double t592 = -t565;
        double t593 = -t567;
        double t594 = -t569;
        double t595 = -t571;
        double t596 = -t573;
        double t597 = -t575;
        double t598 = -t580;
        double t599 = -t585;
        double t600 = -t590;
        double t610 = t286+t566;
        double t611 = t284+t568;
        double t612 = t282+t570;
        double t613 = t295+t572;
        double t614 = t293+t574;
        double t615 = t291+t576;
        double t616 = t306+t577;
        double t617 = t301+t579;
        double t618 = t305+t578;
        double t619 = t299+t582;
        double t620 = t303+t581;
        double t621 = t298+t583;
        double t622 = t315+t584;
        double t623 = t310+t587;
        double t624 = t314+t586;
        double t625 = t308+t589;
        double t626 = t312+t588;
        double t627 = t307+t591;
        double t649 = -t644;
        double t650 = -t645;
        double t651 = -t647;
        double t652 = -t648;
        double t671 = -t665;
        double t672 = -t666;
        double t673 = -t667;
        double t674 = t477+t643;
        double t675 = t489+t646;
        double t680 = t483+t664;
        double t681 = t485+t663;
        double t682 = t486+t662;
        double t683 = t478+t670;
        double t684 = t479+t669;
        double t685 = t481+t668;
        double t509 = t89+t503;
        double t510 = t90+t504;
        double t628 = t288+t592;
        double t629 = t283+t593;
        double t630 = t285+t594;
        double t631 = t280+t595;
        double t632 = t296+t596;
        double t633 = t290+t597;
        double t634 = t302+t598;
        double t635 = t313+t599;
        double t636 = t309+t600;
        double t676 = t476+t649;
        double t677 = t475+t650;
        double t678 = t488+t651;
        double t679 = t487+t652;
        double t686 = t480+t673;
        double t687 = t482+t672;
        double t688 = t484+t671;
        
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d1, d1, kd*(norm11*norm11)*t7*t69*(-1.0/2.0)-anglesDiff*kd*norm11*t7*t69*t191);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d2, d1, t507);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d3, d1, t506);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d4, d1, t606);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d5, d1, t615);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d6, d1, t605);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d7, d1, t631);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d8, d1, t612);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d9, d1, t630);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d10, d1, t168);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d11, d1, t169);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d12, d1, t171);
        
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d1, d2, t507);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d2, d2, kd*(norm12*norm12)*t7*t69*(-1.0/2.0)+anglesDiff*kd*norm12*t7*t69*t190);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d3, d2, t509);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d4, d2, t633);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d5, d2, t614);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d6, d2, t632);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d7, d2, t602);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d8, d2, t611);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d9, d2, t601);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d10, d2, t170);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d11, d2, t172);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d12, d2, t174);
        
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d1, d3, t506);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d2, d3, t509);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d3, d3, kd*(norm13*norm13)*t7*t69*(-1.0/2.0)-anglesDiff*kd*norm13*t7*t69*t189);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d4, d3, t604);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d5, d3, t613);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d6, d3, t603);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d7, d3, t629);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d8, d3, t610);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d9, d3, t628);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d10, d3, t173);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d11, d3, t175);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d12, d3, t176);
        
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d1, d4, t606);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d2, d4, t633);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d3, d4, t604);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d4, d4, kd*(t198*t198)*-2.0-anglesDiff*kd*(t207+t225+(norm11*t2*t7*t66*t182)/2.0-(norm21*t4*t9*t68*t188)/2.0)*2.0);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d5, d4, t679);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d6, d4, t678);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d7, d4, t683);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d8, d4, t686);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d9, d4, t680);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d10, d4, t627);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d11, d4, t625);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d12, d4, t623);
        
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d1, d5, t615);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d2, d5, t614);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d3, d5, t613);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d4, d5, t679);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d5, d5, kd*(t199*t199)*-2.0+anglesDiff*kd*(t205+t223+(norm12*t2*t7*t66*t181)/2.0-(norm22*t4*t9*t68*t187)/2.0)*2.0);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d6, d5, t675);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d7, d5, t684);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d8, d5, t687);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d9, d5, t681);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d10, d5, t636);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d11, d5, t609);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d12, d5, t635);
        
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d1, d6, t605);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d2, d6, t632);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d3, d6, t603);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d4, d6, t678);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d5, d6, t675);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d6, d6, kd*(t200*t200)*-2.0-anglesDiff*kd*(t203+t221+(norm13*t2*t7*t66*t180)/2.0-(norm23*t4*t9*t68*t186)/2.0)*2.0);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d7, d6, t685);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d8, d6, t688);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d9, d6, t682);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d10, d6, t626);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d11, d6, t624);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d12, d6, t622);
        
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d1, d7, t631);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d2, d7, t602);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d3, d7, t629);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d4, d7, t683);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d5, d7, t684);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d6, d7, t685);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d7, d7, kd*(t195*t195)*-2.0-anglesDiff*kd*(t207+t225-(norm11*t3*t7*t65*t179)/2.0+(norm21*t5*t9*t67*t185)/2.0)*2.0);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d8, d7, t677);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d9, d7, t676);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d10, d7, t621);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d11, d7, t619);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d12, d7, t617);
        
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d1, d8, t612);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d2, d8, t611);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d3, d8, t610);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d4, d8, t686);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d5, d8, t687);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d6, d8, t688);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d7, d8, t677);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d8, d8, kd*(t196*t196)*-2.0+anglesDiff*kd*(t205+t223-(norm12*t3*t7*t65*t178)/2.0+(norm22*t5*t9*t67*t184)/2.0)*2.0);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d9, d8, t674);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d10, d8, t608);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d11, d8, t634);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d12, d8, t607);
        
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d1, d9, t630);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d2, d9, t601);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d3, d9, t628);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d4, d9, t680);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d5, d9, t681);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d6, d9, t682);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d7, d9, t676);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d8, d9, t674);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d9, d9, kd*(t197*t197)*-2.0-anglesDiff*kd*(t203+t221-(norm13*t3*t7*t65*t177)/2.0+(norm23*t5*t9*t67*t183)/2.0)*2.0);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d10, d9, t620);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d11, d9, t618);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d12, d9, t616);
        
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d1, d10, t168);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d2, d10, t170);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d3, d10, t173);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d4, d10, t627);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d5, d10, t636);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d6, d10, t626);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d7, d10, t621);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d8, d10, t608);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d9, d10, t620);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d10, d10, kd*(norm21*norm21)*t9*t69*(-1.0/2.0)+anglesDiff*kd*norm21*t9*t69*t194);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d11, d10, t510);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d12, d10, t505);
        
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d1, d11, t169);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d2, d11, t172);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d3, d11, t175);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d4, d11, t625);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d5, d11, t609);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d6, d11, t624);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d7, d11, t619);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d8, d11, t634);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d9, d11, t618);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d10, d11, t510);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d11, d11, kd*(norm22*norm22)*t9*t69*(-1.0/2.0)-anglesDiff*kd*norm22*t9*t69*t193);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d12, d11, t508);
        
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d1, d12, t171);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d2, d12, t174);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d3, d12, t176);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d4, d12, t623);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d5, d12, t635);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d6, d12, t622);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d7, d12, t617);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d8, d12, t607);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d9, d12, t616);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d10, d12, t505);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d11, d12, t508);
        addEntry(vals,valsD,alpha1,counter,  ii,jj, d12, d12, kd*(norm23*norm23)*t9*t69*(-1.0/2.0)+anglesDiff*kd*norm23*t9*t69*t192);

        //updating the global variables
        dpsidX[ d1 -1] += anglesDiff*kd*norm11*t6*t71;
        dpsidX[ d2 -1] += anglesDiff*kd*norm12*t6*t71;
        dpsidX[ d3 -1] += anglesDiff*kd*norm13*t6*t71;
        dpsidX[ d4 -1] += anglesDiff*kd*t198*-2.0;
        dpsidX[ d5 -1] += anglesDiff*kd*t199*-2.0;
        dpsidX[ d6 -1] += anglesDiff*kd*t200*-2.0;
        dpsidX[ d7 -1] += anglesDiff*kd*t195*-2.0;
        dpsidX[ d8 -1] += anglesDiff*kd*t196*-2.0;
        dpsidX[ d9 -1] += anglesDiff*kd*t197*-2.0;
        dpsidX[ d10 -1] += anglesDiff*kd*norm21*t8*t71;
        dpsidX[ d11 -1] += anglesDiff*kd*norm22*t8*t71;
        dpsidX[ d12 -1] += anglesDiff*kd*norm23*t8*t71;

    }
}
