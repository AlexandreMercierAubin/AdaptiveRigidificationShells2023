/* 
 * [ ii, jj, vals, dpsidX ] = mexGrinspunPlanar( V, T, kl, ka, Abar, isShell, alpha1, normebars);
 *
 * Input:
 *  V       3#vertices vector of vertex position
 *  T        #E by 4 vertices of elements
 *  kl       #E length stiffness
 *  ka   #E Lam√© parameter of each element
 *  Abar
 *  isShell
 *  alpha1
 *  normebars #E by 3 rest edge lengths in the following order |x1-x2|, |x1-x3|, |x2-x3|
 *  isShellCount  1 value; sum of the total number of shell elements
 * 
 * Output:
 *  ii         81x#E by 1 row indices for each Hessian bloc in a sparse matrix
 *  jj         81x#E by 1 col indices for each Hessian block in a sparse matrix
 *  vals      81x#E by 1 energy Hessian wrt X for each element
 *  dpsidX     9x#3V by 1 energy gradient
 *  valsD,alpha1
 *  Wa
 *  Wl
 *
 * To compile type: mex -R2018a mexGrinspunPlanar.cpp
 *
 * Notes:
 *
 * Code generated by energy/mexGrinspunPlanar.m
 *
 *========================================================*/

#include "mex.h"
#include "blas.h"
#include <math.h> 

void addEntry(double *vals,double *valsD, double alpha1, int &counter, double * ii,double * jj, int key1, int key2, double value){
    ii[counter] = key1;
    jj[counter] = key2;
    vals[counter] = value;
    valsD[counter] = alpha1*value;
    ++counter;
}

/* 
 * The gateway function
 */
void mexFunction(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[] ) {
    const size_t numDOFs = mxGetM(prhs[0]);
    double *V = mxGetDoubles(prhs[0]);
    int* T = (int*)mxGetData(prhs[1]);       //#tri by 4 indices (starting from 1) of verts of each element
    const size_t numElements = mxGetM(prhs[1]);
    double *kls = mxGetDoubles(prhs[2]);
    double *kas = mxGetDoubles(prhs[3]);
    double *Abars = mxGetDoubles(prhs[4]);
    bool *isShell = mxGetLogicals(prhs[5]);
    double *alpha1s = mxGetDoubles(prhs[6]);
    double *normebars = mxGetDoubles(prhs[7]);
    double *isShellCount = mxGetDoubles(prhs[8]);

    if ( nrhs != 9 ) {
        mexErrMsgIdAndTxt("ARP:mexGrinspunPlanar:nrhs","9 inputs required.");
    }
    // make sure the arguments are dense real double
    if ( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) || mxIsSparse(prhs[0]) ) {
        mexErrMsgIdAndTxt("ARP:mexGrinspunPlanar:mustBeDenseRealDouble","Parameters must be dense real double.");
    }
    if ( mxIsComplex(prhs[1]) || mxIsSparse(prhs[1]) ) {
        mexErrMsgIdAndTxt("ARP:mexGrinspunPlanar:mustBeDenseRealDouble","Parameters must be dense int.");
    }
    if ( !mxIsLogical(prhs[5]) || mxIsComplex(prhs[5]) || mxIsSparse(prhs[5]) ) {
        mexErrMsgIdAndTxt("ARP:mexGrinspunPlanar:mustBeLogical","Parameter isShell must be logical");
    }
    
    if ( mxGetN(prhs[0]) != 1 ) {
        mexErrMsgIdAndTxt("ARP:mexGrinspunPlanar:mustHave3cols","Parameter V must have 3x#vertices rows, but only one column");
    }
    if ( mxGetN(prhs[1]) != 3 && mxGetN(prhs[1]) != 4) {
        mexErrMsgIdAndTxt("ARP:mexGrinspunPlanar:mustHave3cols","Parameter T must have 3 or 4 columns.");
    }
    
    // create the output vectors 
    mwSize shellNum = (mwSize)(81 * isShellCount[0]);
    plhs[0] = mxCreateDoubleMatrix( shellNum, 1, mxREAL );
    double *ii = mxGetDoubles(plhs[0]);
    plhs[1] = mxCreateDoubleMatrix( shellNum, 1, mxREAL );
    double *jj = mxGetDoubles(plhs[1]);
    plhs[2] = mxCreateDoubleMatrix( shellNum, 1, mxREAL );
    double *vals = mxGetDoubles(plhs[2]);
    plhs[3] = mxCreateDoubleMatrix(numDOFs, 1, mxREAL );
    double *dpsidX = mxGetDoubles(plhs[3]);
    plhs[4] = mxCreateDoubleMatrix(shellNum, 1, mxREAL);
    double* valsD = mxGetDoubles(plhs[4]);
    plhs[5] = mxCreateDoubleMatrix(numElements, 1, mxREAL);
    double* Wa = mxGetDoubles(plhs[5]);
    plhs[6] = mxCreateDoubleMatrix(numElements, 1, mxREAL);
    double* Wl = mxGetDoubles(plhs[6]);
    
    int counter = 0;

    for ( int el = 0; el < numElements; el++ ) {
        if(!isShell[el]){ 
            continue;
        }
        double kl = kls[el];
        double ka = kas[el];
        double Abar = Abars[el];
        int vert1 = T[el];
        int vert2 = T[el+numElements];
        int vert3 = T[el+numElements*2];
        int d1 = vert1*3-2;
        int d2 = vert1*3-1;
        int d3 = vert1*3;
        int d4 = vert2*3-2;
        int d5 = vert2*3-1;
        int d6 = vert2*3;
        int d7 = vert3*3-2;
        int d8 = vert3*3-1;
        int d9 = vert3*3;
        double x1 = V[d1 - 1];
        double x2 = V[d2 - 1];
        double x3 = V[d3 - 1];
        double x4 = V[d4 - 1];
        double x5 = V[d5 - 1];
        double x6 = V[d6 - 1];
        double x7 = V[d7 - 1];
        double x8 = V[d8 - 1];
        double x9 = V[d9 - 1];
        double normebar1 = normebars[el];
        double normebar2 = normebars[el+numElements];
        double normebar3 = normebars[el+numElements*2];
        double alpha1 = alpha1s[el];

        // code gen
        double t2 = x1*2.0;
        double t3 = x2*2.0;
        double t4 = x3*2.0;
        double t5 = x4*2.0;
        double t6 = x5*2.0;
        double t7 = x6*2.0;
        double t8 = x7*2.0;
        double t9 = x8*2.0;
        double t10 = x9*2.0;
        double t11 = 1.0/Abar;
        double t12 = 1.0/normebar1;
        double t13 = 1.0/normebar2;
        double t14 = 1.0/normebar3;
        double t15 = -x4;
        double t17 = -x5;
        double t19 = -x6;
        double t21 = -x7;
        double t23 = -x8;
        double t25 = -x9;
        double t16 = -t5;
        double t18 = -t6;
        double t20 = -t7;
        double t22 = -t8;
        double t24 = -t9;
        double t26 = -t10;
        double t27 = t15+x1;
        double t28 = t17+x2;
        double t29 = t21+x1;
        double t30 = t19+x3;
        double t31 = t23+x2;
        double t32 = t21+x4;
        double t33 = t25+x3;
        double t34 = t23+x5;
        double t35 = t25+x6;
        double t36 = t2+t16;
        double t37 = t3+t18;
        double t38 = t2+t22;
        double t39 = t4+t20;
        double t40 = t3+t24;
        double t41 = t5+t22;
        double t42 = t4+t26;
        double t43 = t6+t24;
        double t44 = t7+t26;
        double t45 = t27*t27;
        double t46 = t28*t28;
        double t47 = t29*t29;
        double t48 = t30*t30;
        double t49 = t31*t31;
        double t50 = t32*t32;
        double t51 = t33*t33;
        double t52 = t34*t34;
        double t53 = t35*t35;
        double t72 = t27*t31;
        double t73 = t28*t29;
        double t74 = t27*t33;
        double t75 = t29*t30;
        double t76 = t28*t33;
        double t77 = t30*t31;
        double t78 = t27*t29*2.0;
        double t81 = t27*t32*2.0;
        double t85 = t28*t31*2.0;
        double t87 = t27*t34*2.0;
        double t88 = t28*t32*2.0;
        double t92 = t29*t32*2.0;
        double t94 = t27*t35*2.0;
        double t95 = t28*t34*2.0;
        double t96 = t30*t32*2.0;
        double t98 = t29*t34*2.0;
        double t100 = t30*t33*2.0;
        double t101 = t31*t32*2.0;
        double t102 = t28*t35*2.0;
        double t103 = t30*t34*2.0;
        double t104 = t29*t35*2.0;
        double t105 = t31*t34*2.0;
        double t106 = t32*t33*2.0;
        double t107 = t30*t35*2.0;
        double t108 = t31*t35*2.0;
        double t109 = t33*t34*2.0;
        double t110 = t33*t35*2.0;
        double t54 = t45*2.0;
        double t55 = t36*t36;
        double t56 = t46*2.0;
        double t57 = t47*2.0;
        double t58 = t37*t37;
        double t59 = t48*2.0;
        double t60 = t38*t38;
        double t61 = t49*2.0;
        double t62 = t39*t39;
        double t63 = t50*2.0;
        double t64 = t40*t40;
        double t65 = t51*2.0;
        double t66 = t41*t41;
        double t67 = t52*2.0;
        double t68 = t42*t42;
        double t69 = t43*t43;
        double t70 = t53*2.0;
        double t71 = t44*t44;
        double t79 = t72*2.0;
        double t80 = t73*2.0;
        double t82 = t72*4.0;
        double t83 = t74*2.0;
        double t84 = t73*4.0;
        double t86 = t75*2.0;
        double t89 = t74*4.0;
        double t90 = t76*2.0;
        double t91 = t75*4.0;
        double t93 = t77*2.0;
        double t97 = t76*4.0;
        double t99 = t77*4.0;
        double t111 = -t73;
        double t114 = -t75;
        double t118 = -t77;
        double t123 = t45+t46+t48;
        double t124 = t47+t49+t51;
        double t125 = t50+t52+t53;
        double t130 = t78+t85;
        double t132 = t78+t100;
        double t134 = t81+t95;
        double t135 = t85+t100;
        double t136 = t81+t107;
        double t137 = t92+t105;
        double t138 = t95+t107;
        double t139 = t92+t110;
        double t140 = t105+t110;
        double t112 = -t79;
        double t113 = -t80;
        double t115 = -t83;
        double t116 = -t84;
        double t117 = -t86;
        double t119 = -t90;
        double t120 = -t91;
        double t121 = -t93;
        double t122 = -t99;
        double t126 = 1.0/t123;
        double t127 = 1.0/t124;
        double t128 = 1.0/t125;
        double t129 = t72+t111;
        double t131 = t74+t114;
        double t133 = t76+t118;
        double t141 = sqrt(t123);
        double t142 = sqrt(t124);
        double t143 = sqrt(t125);
        double t144 = t79+t116;
        double t145 = t82+t113;
        double t146 = t83+t120;
        double t147 = t89+t117;
        double t148 = t90+t122;
        double t149 = t97+t121;
        double t150 = 1.0/t141;
        double t152 = 1.0/t142;
        double t154 = 1.0/t143;
        double t156 = t129*t129;
        double t157 = t131*t131;
        double t158 = t133*t133;
        double t159 = t12*t141;
        double t160 = t13*t142;
        double t161 = t14*t143;
        double t165 = t27*t129*2.0;
        double t166 = t28*t129*2.0;
        double t167 = t29*t129*2.0;
        double t168 = t27*t131*2.0;
        double t169 = t31*t129*2.0;
        double t170 = t32*t129*2.0;
        double t171 = t29*t131*2.0;
        double t172 = t30*t131*2.0;
        double t173 = t34*t129*2.0;
        double t174 = t28*t133*2.0;
        double t175 = t32*t131*2.0;
        double t176 = t33*t131*2.0;
        double t177 = t30*t133*2.0;
        double t178 = t31*t133*2.0;
        double t179 = t35*t131*2.0;
        double t180 = t33*t133*2.0;
        double t181 = t34*t133*2.0;
        double t182 = t35*t133*2.0;
        double t186 = t80+t88+t112;
        double t187 = t79+t87+t113;
        double t188 = t80+t101+t112;
        double t189 = t79+t98+t113;
        double t190 = t86+t96+t115;
        double t191 = t83+t94+t117;
        double t192 = t86+t106+t115;
        double t193 = t83+t104+t117;
        double t194 = t93+t103+t119;
        double t195 = t90+t102+t121;
        double t196 = t93+t109+t119;
        double t197 = t90+t108+t121;
        double t198 = (t12*t55*t126)/2.0;
        double t199 = (t12*t58*t126)/2.0;
        double t200 = (t12*t62*t126)/2.0;
        double t201 = (t13*t60*t127)/2.0;
        double t202 = (t13*t64*t127)/2.0;
        double t203 = (t13*t68*t127)/2.0;
        double t204 = (t14*t66*t128)/2.0;
        double t205 = (t14*t69*t128)/2.0;
        double t206 = (t14*t71*t128)/2.0;
        double t207 = (t12*t36*t37*t126)/2.0;
        double t208 = (t12*t36*t39*t126)/2.0;
        double t209 = (t12*t37*t39*t126)/2.0;
        double t210 = (t13*t38*t40*t127)/2.0;
        double t211 = (t13*t38*t42*t127)/2.0;
        double t212 = (t13*t40*t42*t127)/2.0;
        double t213 = (t14*t41*t43*t128)/2.0;
        double t214 = (t14*t41*t44*t128)/2.0;
        double t215 = (t14*t43*t44*t128)/2.0;
        double t151 = t150*t150*t150;
        double t153 = t152*t152*t152;
        double t155 = t154*t154*t154;
        double t162 = t159-1.0;
        double t163 = t160-1.0;
        double t164 = t161-1.0;
        double t183 = -t177;
        double t184 = -t180;
        double t185 = -t182;
        double t219 = t166+t172;
        double t220 = t168+t174;
        double t221 = t169+t176;
        double t222 = t171+t178;
        double t223 = t173+t179;
        double t224 = t175+t181;
        double t282 = t156+t157+t158;
        double t216 = t150*t162*2.0;
        double t217 = t152*t163*2.0;
        double t218 = t154*t164*2.0;
        double t225 = t165+t183;
        double t226 = t167+t184;
        double t227 = t170+t185;
        double t228 = t36*t150*t162;
        double t229 = t37*t150*t162;
        double t230 = t39*t150*t162;
        double t231 = t38*t152*t163;
        double t232 = t40*t152*t163;
        double t233 = t42*t152*t163;
        double t234 = t41*t154*t164;
        double t235 = t43*t154*t164;
        double t236 = t44*t154*t164;
        double t237 = t219*t219;
        double t238 = t220*t220;
        double t239 = t221*t221;
        double t240 = t222*t222;
        double t241 = t223*t223;
        double t242 = t224*t224;
        double t246 = (t55*t151*t162)/2.0;
        double t247 = (t58*t151*t162)/2.0;
        double t248 = (t62*t151*t162)/2.0;
        double t249 = (t60*t153*t163)/2.0;
        double t250 = (t64*t153*t163)/2.0;
        double t251 = (t68*t153*t163)/2.0;
        double t252 = (t66*t155*t164)/2.0;
        double t253 = (t69*t155*t164)/2.0;
        double t254 = (t71*t155*t164)/2.0;
        double t264 = (t36*t37*t151*t162)/2.0;
        double t265 = (t36*t39*t151*t162)/2.0;
        double t266 = (t37*t39*t151*t162)/2.0;
        double t267 = (t38*t40*t153*t163)/2.0;
        double t268 = (t38*t42*t153*t163)/2.0;
        double t269 = (t40*t42*t153*t163)/2.0;
        double t270 = (t41*t43*t155*t164)/2.0;
        double t271 = (t41*t44*t155*t164)/2.0;
        double t272 = (t43*t44*t155*t164)/2.0;
        double t283 = 1.0/t282;
        double t284 = sqrt(t282);
        double t243 = t225*t225;
        double t244 = t226*t226;
        double t245 = t227*t227;
        double t255 = -t246;
        double t256 = -t247;
        double t257 = -t248;
        double t258 = -t249;
        double t259 = -t250;
        double t260 = -t251;
        double t261 = -t252;
        double t262 = -t253;
        double t263 = -t254;
        double t273 = -t264;
        double t274 = -t265;
        double t275 = -t266;
        double t276 = -t267;
        double t277 = -t268;
        double t278 = -t269;
        double t279 = -t270;
        double t280 = -t271;
        double t281 = -t272;
        double t285 = 1.0/t284;
        double t287 = (t11*t284)/2.0;
        double t385 = (ka*t11*t219*t220*t283)/8.0;
        double t386 = (ka*t11*t219*t221*t283)/8.0;
        double t387 = (ka*t11*t219*t222*t283)/8.0;
        double t388 = (ka*t11*t220*t221*t283)/8.0;
        double t389 = (ka*t11*t219*t223*t283)/8.0;
        double t390 = (ka*t11*t220*t222*t283)/8.0;
        double t391 = (ka*t11*t219*t224*t283)/8.0;
        double t392 = (ka*t11*t220*t223*t283)/8.0;
        double t393 = (ka*t11*t221*t222*t283)/8.0;
        double t394 = (ka*t11*t221*t223*t283)/8.0;
        double t395 = (ka*t11*t220*t224*t283)/8.0;
        double t396 = (ka*t11*t221*t224*t283)/8.0;
        double t397 = (ka*t11*t222*t223*t283)/8.0;
        double t398 = (ka*t11*t222*t224*t283)/8.0;
        double t399 = (ka*t11*t223*t224*t283)/8.0;
        double t412 = (ka*t11*t219*t225*t283)/8.0;
        double t415 = (ka*t11*t220*t225*t283)/8.0;
        double t416 = (ka*t11*t219*t226*t283)/8.0;
        double t417 = (ka*t11*t221*t225*t283)/8.0;
        double t418 = (ka*t11*t222*t225*t283)/8.0;
        double t419 = (ka*t11*t220*t226*t283)/8.0;
        double t420 = (ka*t11*t219*t227*t283)/8.0;
        double t421 = (ka*t11*t223*t225*t283)/8.0;
        double t423 = (ka*t11*t221*t226*t283)/8.0;
        double t427 = (ka*t11*t224*t225*t283)/8.0;
        double t428 = (ka*t11*t220*t227*t283)/8.0;
        double t430 = (ka*t11*t222*t226*t283)/8.0;
        double t431 = (ka*t11*t221*t227*t283)/8.0;
        double t432 = (ka*t11*t223*t226*t283)/8.0;
        double t433 = (ka*t11*t224*t226*t283)/8.0;
        double t434 = (ka*t11*t222*t227*t283)/8.0;
        double t436 = (ka*t11*t223*t227*t283)/8.0;
        double t438 = (ka*t11*t224*t227*t283)/8.0;
        double t446 = (ka*t11*t225*t226*t283)/8.0;
        double t452 = (ka*t11*t225*t227*t283)/8.0;
        double t453 = (ka*t11*t226*t227*t283)/8.0;
        double t286 = t285*t285*t285;
        double t288 = t287-1.0;
        double t289 = t207+t273;
        double t290 = t208+t274;
        double t291 = t209+t275;
        double t292 = t210+t276;
        double t293 = t211+t277;
        double t294 = t212+t278;
        double t295 = t213+t279;
        double t296 = t214+t280;
        double t297 = t215+t281;
        double t316 = t198+t216+t255;
        double t317 = t199+t216+t256;
        double t318 = t200+t216+t257;
        double t319 = t201+t217+t258;
        double t320 = t202+t217+t259;
        double t321 = t203+t217+t260;
        double t322 = t204+t218+t261;
        double t323 = t205+t218+t262;
        double t324 = t206+t218+t263;
        double t413 = -t385;
        double t414 = -t386;
        double t422 = -t390;
        double t424 = -t391;
        double t425 = -t392;
        double t426 = -t393;
        double t429 = -t394;
        double t435 = -t398;
        double t437 = -t399;
        double t445 = -t412;
        double t447 = -t418;
        double t448 = -t419;
        double t449 = -t420;
        double t450 = -t421;
        double t451 = -t423;
        double t454 = -t433;
        double t455 = -t434;
        double t456 = -t436;
        double t457 = -t446;
        double t458 = -t453;
        double t298 = kl*t289;
        double t299 = kl*t290;
        double t300 = kl*t291;
        double t301 = kl*t292;
        double t302 = kl*t293;
        double t303 = kl*t294;
        double t304 = kl*t295;
        double t305 = kl*t296;
        double t306 = kl*t297;
        double t325 = kl*t316;
        double t326 = kl*t317;
        double t327 = kl*t318;
        double t328 = kl*t319;
        double t329 = kl*t320;
        double t330 = kl*t321;
        double t331 = kl*t322;
        double t332 = kl*t323;
        double t333 = kl*t324;
        double t343 = ka*t27*t28*t285*t288;
        double t344 = ka*t27*t30*t285*t288;
        double t345 = ka*t28*t30*t285*t288;
        double t346 = ka*t29*t31*t285*t288;
        double t347 = ka*t29*t33*t285*t288;
        double t348 = ka*t31*t33*t285*t288;
        double t349 = ka*t32*t34*t285*t288;
        double t350 = ka*t32*t35*t285*t288;
        double t351 = ka*t34*t35*t285*t288;
        double t361 = (ka*t130*t285*t288)/2.0;
        double t362 = (ka*t132*t285*t288)/2.0;
        double t363 = (ka*t134*t285*t288)/2.0;
        double t364 = (ka*t135*t285*t288)/2.0;
        double t365 = (ka*t136*t285*t288)/2.0;
        double t366 = (ka*t137*t285*t288)/2.0;
        double t367 = (ka*t138*t285*t288)/2.0;
        double t368 = (ka*t139*t285*t288)/2.0;
        double t369 = (ka*t140*t285*t288)/2.0;
        double t371 = (ka*t144*t285*t288)/2.0;
        double t372 = ka*t285*t288*(t80-t82)*(-1.0/2.0);
        double t374 = (ka*t146*t285*t288)/2.0;
        double t375 = ka*t285*t288*(t86-t89)*(-1.0/2.0);
        double t377 = (ka*t148*t285*t288)/2.0;
        double t378 = ka*t285*t288*(t93-t97)*(-1.0/2.0);
        double t400 = (ka*t186*t285*t288)/2.0;
        double t401 = (ka*t187*t285*t288)/2.0;
        double t402 = (ka*t188*t285*t288)/2.0;
        double t403 = (ka*t189*t285*t288)/2.0;
        double t404 = (ka*t190*t285*t288)/2.0;
        double t405 = (ka*t191*t285*t288)/2.0;
        double t406 = (ka*t192*t285*t288)/2.0;
        double t407 = (ka*t193*t285*t288)/2.0;
        double t408 = (ka*t194*t285*t288)/2.0;
        double t409 = (ka*t195*t285*t288)/2.0;
        double t410 = (ka*t196*t285*t288)/2.0;
        double t411 = (ka*t197*t285*t288)/2.0;
        double t459 = t289+t292;
        double t460 = t290+t293;
        double t461 = t291+t294;
        double t462 = t289+t295;
        double t463 = t290+t296;
        double t464 = t291+t297;
        double t465 = t292+t295;
        double t466 = t293+t296;
        double t467 = t294+t297;
        double t477 = (ka*t219*t220*t286*t288)/4.0;
        double t478 = (ka*t219*t221*t286*t288)/4.0;
        double t479 = (ka*t219*t222*t286*t288)/4.0;
        double t480 = (ka*t220*t221*t286*t288)/4.0;
        double t481 = (ka*t219*t223*t286*t288)/4.0;
        double t482 = (ka*t220*t222*t286*t288)/4.0;
        double t483 = (ka*t219*t224*t286*t288)/4.0;
        double t484 = (ka*t220*t223*t286*t288)/4.0;
        double t485 = (ka*t221*t222*t286*t288)/4.0;
        double t486 = (ka*t221*t223*t286*t288)/4.0;
        double t487 = (ka*t220*t224*t286*t288)/4.0;
        double t488 = (ka*t221*t224*t286*t288)/4.0;
        double t489 = (ka*t222*t223*t286*t288)/4.0;
        double t490 = (ka*t222*t224*t286*t288)/4.0;
        double t491 = (ka*t223*t224*t286*t288)/4.0;
        double t492 = (ka*t219*t225*t286*t288)/4.0;
        double t493 = (ka*t220*t225*t286*t288)/4.0;
        double t494 = (ka*t219*t226*t286*t288)/4.0;
        double t495 = (ka*t221*t225*t286*t288)/4.0;
        double t499 = (ka*t222*t225*t286*t288)/4.0;
        double t500 = (ka*t220*t226*t286*t288)/4.0;
        double t501 = (ka*t219*t227*t286*t288)/4.0;
        double t502 = (ka*t223*t225*t286*t288)/4.0;
        double t503 = (ka*t221*t226*t286*t288)/4.0;
        double t504 = (ka*t224*t225*t286*t288)/4.0;
        double t505 = (ka*t220*t227*t286*t288)/4.0;
        double t506 = (ka*t222*t226*t286*t288)/4.0;
        double t508 = (ka*t221*t227*t286*t288)/4.0;
        double t509 = (ka*t223*t226*t286*t288)/4.0;
        double t512 = (ka*t224*t226*t286*t288)/4.0;
        double t513 = (ka*t222*t227*t286*t288)/4.0;
        double t514 = (ka*t223*t227*t286*t288)/4.0;
        double t515 = (ka*t224*t227*t286*t288)/4.0;
        double t519 = (ka*t225*t226*t286*t288)/4.0;
        double t520 = (ka*t225*t227*t286*t288)/4.0;
        double t526 = (ka*t226*t227*t286*t288)/4.0;
        double t307 = -t298;
        double t308 = -t299;
        double t309 = -t300;
        double t310 = -t301;
        double t311 = -t302;
        double t312 = -t303;
        double t313 = -t304;
        double t314 = -t305;
        double t315 = -t306;
        double t334 = -t325;
        double t335 = -t326;
        double t336 = -t327;
        double t337 = -t328;
        double t338 = -t329;
        double t339 = -t330;
        double t340 = -t331;
        double t341 = -t332;
        double t342 = -t333;
        double t352 = -t343;
        double t353 = -t344;
        double t354 = -t345;
        double t355 = -t346;
        double t356 = -t347;
        double t357 = -t348;
        double t358 = -t349;
        double t359 = -t350;
        double t360 = -t351;
        double t370 = -t361;
        double t373 = -t362;
        double t376 = -t364;
        double t379 = -t366;
        double t380 = -t368;
        double t381 = -t369;
        double t382 = -t371;
        double t383 = -t374;
        double t384 = -t377;
        double t439 = -t400;
        double t440 = -t401;
        double t441 = -t404;
        double t442 = -t405;
        double t443 = -t408;
        double t444 = -t409;
        double t468 = kl*t459;
        double t469 = kl*t460;
        double t470 = kl*t461;
        double t471 = kl*t462;
        double t472 = kl*t463;
        double t473 = kl*t464;
        double t474 = kl*t465;
        double t475 = kl*t466;
        double t476 = kl*t467;
        double t496 = -t479;
        double t497 = -t480;
        double t498 = -t481;
        double t507 = -t487;
        double t510 = -t488;
        double t511 = -t489;
        double t516 = -t493;
        double t517 = -t494;
        double t518 = -t495;
        double t521 = -t504;
        double t522 = -t505;
        double t523 = -t506;
        double t524 = -t508;
        double t525 = -t509;
        double t527 = -t515;
        double t528 = -t520;
        double t529 = t314+t375+t388+t497;
        double t530 = t314+t383+t387+t496;
        double t531 = t313+t372+t417+t518;
        double t532 = t315+t378+t448+t500;
        double t533 = t313+t382+t416+t517;
        double t534 = t315+t384+t447+t499;
        double t535 = t308+t396+t406+t510;
        double t536 = t308+t397+t407+t511;
        double t537 = t311+t424+t441+t483;
        double t538 = t311+t425+t442+t484;
        double t539 = t307+t402+t431+t524;
        double t540 = t307+t403+t432+t525;
        double t541 = t309+t410+t454+t512;
        double t542 = t309+t411+t455+t513;
        double t543 = t310+t439+t449+t501;
        double t544 = t310+t440+t450+t502;
        double t545 = t312+t427+t443+t521;
        double t546 = t312+t428+t444+t522;
        double t547 = t337+t367+t389+t498;
        double t548 = t339+t363+t395+t507;
        double t549 = t334+t381+t429+t486;
        double t550 = t336+t379+t435+t490;
        double t551 = t340+t376+t414+t478;
        double t552 = t342+t370+t422+t482;
        double t553 = t338+t365+t452+t528;
        double t554 = t335+t380+t458+t526;
        double t555 = t341+t373+t457+t519;
        double t556 = t359+t437+t469+t491;
        double t557 = t356+t426+t472+t485;
        double t558 = t353+t413+t475+t477;
        double t559 = t358+t456+t468+t514;
        double t560 = t355+t451+t471+t503;
        double t561 = t352+t445+t474+t492;
        double t562 = t360+t438+t470+t527;
        double t563 = t357+t430+t473+t523;
        double t564 = t354+t415+t476+t516;
        
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d1,d1,kl*(t316+t319)+(ka*t11*t241*t283)/8.0-(ka*t241*t286*t288)/4.0+(ka*t285*t288*(t67+t70))/2.0);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d2,d1,t559);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d3,d1,t556);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d4,d1,t549);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d5,d1,t540);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d6,d1,t536);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d7,d1,t547);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d8,d1,t544);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d9,d1,t538);
        
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d1,d2,t559);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d2,d2,kl*(t317+t320)+(ka*t11*t245*t283)/8.0-(ka*t245*t286*t288)/4.0+(ka*t285*t288*(t63+t70))/2.0);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d3,d2,t562);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d4,d2,t539);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d5,d2,t554);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d6,d2,t542);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d7,d2,t543);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d8,d2,t553);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d9,d2,t546);
        
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d1,d3,t556);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d2,d3,t562);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d3,d3,kl*(t318+t321)+(ka*t11*t242*t283)/8.0-(ka*t242*t286*t288)/4.0+(ka*t285*t288*(t63+t67))/2.0);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d4,d3,t535);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d5,d3,t541);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d6,d3,t550);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d7,d3,t537);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d8,d3,t545);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d9,d3,t548);
       
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d1,d4,t549);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d2,d4,t539);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d3,d4,t535);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d4,d4,kl*(t316+t322)+(ka*t11*t239*t283)/8.0-(ka*t239*t286*t288)/4.0+(ka*t285*t288*(t61+t65))/2.0);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d5,d4,t560);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d6,d4,t557);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d7,d4,t551);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d8,d4,t531);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d9,d4,t529);
       
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d1,d5,t540);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d2,d5,t554);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d3,d5,t541);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d4,d5,t560);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d5,d5,kl*(t317+t323)+(ka*t11*t244*t283)/8.0-(ka*t244*t286*t288)/4.0+(ka*t285*t288*(t57+t65))/2.0);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d6,d5,t563);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d7,d5,t533);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d8,d5,t555);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d9,d5,t532);
        
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d1,d6,t536);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d2,d6,t542);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d3,d6,t550);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d4,d6,t557);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d5,d6,t563);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d6,d6,kl*(t318+t324)+(ka*t11*t240*t283)/8.0-(ka*t240*t286*t288)/4.0+(ka*t285*t288*(t57+t61))/2.0);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d7,d6,t530);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d8,d6,t534);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d9,d6,t552);
        
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d1,d7,t547);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d2,d7,t543);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d3,d7,t537);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d4,d7,t551);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d5,d7,t533);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d6,d7,t530);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d7,d7,kl*(t319+t322)+(ka*t11*t237*t283)/8.0-(ka*t237*t286*t288)/4.0+(ka*t285*t288*(t56+t59))/2.0);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d8,d7,t561);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d9,d7,t558);
        
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d1,d8,t544);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d2,d8,t553);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d3,d8,t545);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d4,d8,t531);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d5,d8,t555);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d6,d8,t534);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d7,d8,t561);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d8,d8,kl*(t320+t323)+(ka*t11*t243*t283)/8.0-(ka*t243*t286*t288)/4.0+(ka*t285*t288*(t54+t59))/2.0);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d9,d8,t564);
        
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d1,d9,t538);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d2,d9,t546);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d3,d9,t548);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d4,d9,t529);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d5,d9,t532);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d6,d9,t552);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d7,d9,t558);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d8,d9,t564);
        addEntry(vals,valsD,alpha1,counter,  ii,jj,  d9,d9,kl*(t321+t324)+(ka*t11*t238*t283)/8.0-(ka*t238*t286*t288)/4.0+(ka*t285*t288*(t54+t56))/2.0);
        //note that the vals array work because sparse(ii,jj,vals) accumulates redundant values

        dpsidX[d1 - 1] += kl * (t228 + t231) + (ka * t223 * t285 * t288) / 2.0;
        dpsidX[d2 - 1] += kl * (t229 + t232) - (ka * t227 * t285 * t288) / 2.0;
        dpsidX[d3 - 1] += kl * (t230 + t233) - (ka * t224 * t285 * t288) / 2.0;
        dpsidX[d4 - 1] += -kl * (t228 - t234) - (ka * t221 * t285 * t288) / 2.0;
        dpsidX[d5 - 1] += -kl * (t229 - t235) + (ka * t226 * t285 * t288) / 2.0;
        dpsidX[d6 - 1] += -kl * (t230 - t236) + (ka * t222 * t285 * t288) / 2.0;
        dpsidX[d7 - 1] += -kl * (t231 + t234) + (ka * t219 * t285 * t288) / 2.0;
        dpsidX[d8 - 1] += -kl * (t232 + t235) - (ka * t225 * t285 * t288) / 2.0;
        dpsidX[d9 - 1] += -kl * (t233 + t236) - (ka * t220 * t285 * t288) / 2.0;
  
        Wl[el] = kl*(normebar1*(t162*t162)+normebar2*(t163*t163)+normebar3*(t164*t164));
        Wa[el] = Abar * ka * (t288 * t288);
    }

}
